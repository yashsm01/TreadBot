"""Add asset_type to Portfolio model

Revision ID: b4a0fd250347
Revises: 9343155beefd
Create Date: 2025-05-17 13:23:28.577379

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'b4a0fd250347'
down_revision: Union[str, None] = '9343155beefd'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('swap_transactions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('transaction_id', sa.String(), nullable=False),
    sa.Column('from_symbol', sa.String(), nullable=False),
    sa.Column('to_symbol', sa.String(), nullable=False),
    sa.Column('from_amount', sa.Float(), nullable=False),
    sa.Column('to_amount', sa.Float(), nullable=False),
    sa.Column('rate', sa.Float(), nullable=False),
    sa.Column('fee_percentage', sa.Float(), nullable=False),
    sa.Column('fee_amount', sa.Float(), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('transaction_id')
    )
    op.drop_table('straddle_intervals')
    op.drop_table('transactions')
    op.drop_index('idx_BTC_USDT_05_2025_symbol', table_name='BTC_USDT_05_2025')
    op.drop_index('idx_BTC_USDT_05_2025_timestamp', table_name='BTC_USDT_05_2025')
    op.drop_table('BTC_USDT_05_2025')
    op.drop_index('idx_GUN_USDT_05_2025_symbol', table_name='GUN_USDT_05_2025')
    op.drop_index('idx_GUN_USDT_05_2025_timestamp', table_name='GUN_USDT_05_2025')
    op.drop_table('GUN_USDT_05_2025')
    op.drop_index('idx_ETH_USDT_05_2025_symbol', table_name='ETH_USDT_05_2025')
    op.drop_index('idx_ETH_USDT_05_2025_timestamp', table_name='ETH_USDT_05_2025')
    op.drop_table('ETH_USDT_05_2025')
    op.drop_index('ix_config_coin', table_name='config')
    op.drop_index('ix_config_id', table_name='config')
    op.drop_table('config')
    op.drop_index('idx_BTC_USDT_01_2000_symbol', table_name='BTC_USDT_01_2000')
    op.drop_index('idx_BTC_USDT_01_2000_timestamp', table_name='BTC_USDT_01_2000')
    op.drop_table('BTC_USDT_01_2000')
    op.add_column('portfolios', sa.Column('asset_type', sa.String(), nullable=True))
    op.alter_column('portfolios', 'last_updated',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('positions', 'symbol',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('positions', 'strategy',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('positions', 'status',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('positions', 'total_quantity',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True,
               existing_server_default=sa.text("'0'::double precision"))
    op.alter_column('positions', 'realized_pnl',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True,
               existing_server_default=sa.text("'0'::double precision"))
    op.alter_column('positions', 'unrealized_pnl',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True,
               existing_server_default=sa.text("'0'::double precision"))
    op.alter_column('positions', 'open_time',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('ix_positions_status', table_name='positions')
    op.drop_index('ix_positions_strategy', table_name='positions')
    op.create_index(op.f('ix_positions_id'), 'positions', ['id'], unique=False)
    op.alter_column('telegram_notifications', 'sent_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('telegram_users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('telegram_users', 'last_interaction',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('trades', 'symbol',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('trades', 'side',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('trades', 'quantity',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
    op.alter_column('trades', 'entry_price',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
    op.alter_column('trades', 'order_type',
               existing_type=sa.VARCHAR(),
               nullable=True,
               existing_server_default=sa.text("'STOP'::character varying"))
    op.alter_column('trades', 'strategy',
               existing_type=sa.VARCHAR(),
               nullable=True,
               existing_server_default=sa.text("'STRADDLE'::character varying"))
    op.alter_column('trades', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('trades', 'status',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_index('ix_trades_status', table_name='trades')
    op.drop_index('ix_trades_strategy', table_name='trades')
    op.create_index(op.f('ix_trades_id'), 'trades', ['id'], unique=False)
    op.drop_constraint('trades_position_id_fkey', 'trades', type_='foreignkey')
    op.create_foreign_key(None, 'trades', 'positions', ['position_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'trades', type_='foreignkey')
    op.create_foreign_key('trades_position_id_fkey', 'trades', 'positions', ['position_id'], ['id'], ondelete='SET NULL')
    op.drop_index(op.f('ix_trades_id'), table_name='trades')
    op.create_index('ix_trades_strategy', 'trades', ['strategy'], unique=False)
    op.create_index('ix_trades_status', 'trades', ['status'], unique=False)
    op.alter_column('trades', 'status',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('trades', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('trades', 'strategy',
               existing_type=sa.VARCHAR(),
               nullable=False,
               existing_server_default=sa.text("'STRADDLE'::character varying"))
    op.alter_column('trades', 'order_type',
               existing_type=sa.VARCHAR(),
               nullable=False,
               existing_server_default=sa.text("'STOP'::character varying"))
    op.alter_column('trades', 'entry_price',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
    op.alter_column('trades', 'quantity',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
    op.alter_column('trades', 'side',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('trades', 'symbol',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('telegram_users', 'last_interaction',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('telegram_users', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('telegram_notifications', 'sent_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('ix_positions_id'), table_name='positions')
    op.create_index('ix_positions_strategy', 'positions', ['strategy'], unique=False)
    op.create_index('ix_positions_status', 'positions', ['status'], unique=False)
    op.alter_column('positions', 'open_time',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('positions', 'unrealized_pnl',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False,
               existing_server_default=sa.text("'0'::double precision"))
    op.alter_column('positions', 'realized_pnl',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False,
               existing_server_default=sa.text("'0'::double precision"))
    op.alter_column('positions', 'total_quantity',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False,
               existing_server_default=sa.text("'0'::double precision"))
    op.alter_column('positions', 'status',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('positions', 'strategy',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('positions', 'symbol',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('portfolios', 'last_updated',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_column('portfolios', 'asset_type')
    op.create_table('BTC_USDT_01_2000',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"BTC_USDT_01_2000_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('symbol', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('current_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='BTC_USDT_01_2000_pkey')
    )
    op.create_index('idx_BTC_USDT_01_2000_timestamp', 'BTC_USDT_01_2000', ['timestamp'], unique=False)
    op.create_index('idx_BTC_USDT_01_2000_symbol', 'BTC_USDT_01_2000', ['symbol'], unique=False)
    op.create_table('config',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('coin', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('interval', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('breakout_pct', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('tp_pct', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('sl_pct', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('quantity', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='config_pkey')
    )
    op.create_index('ix_config_id', 'config', ['id'], unique=False)
    op.create_index('ix_config_coin', 'config', ['coin'], unique=True)
    op.create_table('ETH_USDT_05_2025',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"ETH_USDT_05_2025_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('symbol', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('current_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='ETH_USDT_05_2025_pkey')
    )
    op.create_index('idx_ETH_USDT_05_2025_timestamp', 'ETH_USDT_05_2025', ['timestamp'], unique=False)
    op.create_index('idx_ETH_USDT_05_2025_symbol', 'ETH_USDT_05_2025', ['symbol'], unique=False)
    op.create_table('GUN_USDT_05_2025',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"GUN_USDT_05_2025_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('symbol', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('current_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='GUN_USDT_05_2025_pkey')
    )
    op.create_index('idx_GUN_USDT_05_2025_timestamp', 'GUN_USDT_05_2025', ['timestamp'], unique=False)
    op.create_index('idx_GUN_USDT_05_2025_symbol', 'GUN_USDT_05_2025', ['symbol'], unique=False)
    op.create_table('BTC_USDT_05_2025',
    sa.Column('id', sa.INTEGER(), server_default=sa.text('nextval(\'"BTC_USDT_05_2025_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('symbol', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('current_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='BTC_USDT_05_2025_pkey')
    )
    op.create_index('idx_BTC_USDT_05_2025_timestamp', 'BTC_USDT_05_2025', ['timestamp'], unique=False)
    op.create_index('idx_BTC_USDT_05_2025_symbol', 'BTC_USDT_05_2025', ['symbol'], unique=False)
    op.create_table('transactions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('portfolio_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('symbol', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('total', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['portfolio_id'], ['portfolios.id'], name='transactions_portfolio_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='transactions_pkey')
    )
    op.create_table('straddle_intervals',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('position_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('interval_minutes', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='straddle_intervals_pkey')
    )
    op.drop_table('swap_transactions')
    # ### end Alembic commands ###
